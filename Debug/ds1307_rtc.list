
ds1307_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003744  08003744  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800374c  0800374c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000108  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000888e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001620  00000000  00000000  0002892e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  00029f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000728  00000000  00000000  0002a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f82d  00000000  00000000  0002ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009453  00000000  00000000  0004a65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0bfc  00000000  00000000  00053ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001146ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022a0  00000000  00000000  00114700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003640 	.word	0x08003640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003640 	.word	0x08003640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <DS1307_Init+0x1c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f806 	bl	8000588 <DS1307_SetClockHalt>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000fc 	.word	0x200000fc

08000588 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <DS1307_SetClockHalt+0x14>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	e000      	b.n	800059e <DS1307_SetClockHalt+0x16>
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f83d 	bl	8000620 <DS1307_GetRegByte>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005ae:	b25a      	sxtb	r2, r3
 80005b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f811 	bl	80005e4 <DS1307_SetRegByte>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f826 	bl	8000620 <DS1307_GetRegByte>
 80005d4:	4603      	mov	r3, r0
 80005d6:	11db      	asrs	r3, r3, #7
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	733b      	strb	r3, [r7, #12]
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <DS1307_SetRegByte+0x38>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	f107 020c 	add.w	r2, r7, #12
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2302      	movs	r3, #2
 800060c:	21d0      	movs	r1, #208	; 0xd0
 800060e:	f001 f905 	bl	800181c <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000fc 	.word	0x200000fc

08000620 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <DS1307_GetRegByte+0x40>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	1dfa      	adds	r2, r7, #7
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	21d0      	movs	r1, #208	; 0xd0
 800063a:	f001 f8ef 	bl	800181c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <DS1307_GetRegByte+0x40>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f107 020f 	add.w	r2, r7, #15
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	21d0      	movs	r1, #208	; 0xd0
 8000650:	f001 f9e2 	bl	8001a18 <HAL_I2C_Master_Receive>
	return val;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000fc 	.word	0x200000fc

08000664 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8000668:	2003      	movs	r0, #3
 800066a:	f7ff ffd9 	bl	8000620 <DS1307_GetRegByte>
 800066e:	4603      	mov	r3, r0
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f92f 	bl	80008d4 <DS1307_DecodeBCD>
 8000676:	4603      	mov	r3, r0
}
 8000678:	4618      	mov	r0, r3
 800067a:	bd80      	pop	{r7, pc}

0800067c <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000680:	2004      	movs	r0, #4
 8000682:	f7ff ffcd 	bl	8000620 <DS1307_GetRegByte>
 8000686:	4603      	mov	r3, r0
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f923 	bl	80008d4 <DS1307_DecodeBCD>
 800068e:	4603      	mov	r3, r0
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}

08000694 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000698:	2005      	movs	r0, #5
 800069a:	f7ff ffc1 	bl	8000620 <DS1307_GetRegByte>
 800069e:	4603      	mov	r3, r0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f917 	bl	80008d4 <DS1307_DecodeBCD>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}

080006ac <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80006b2:	2010      	movs	r0, #16
 80006b4:	f7ff ffb4 	bl	8000620 <DS1307_GetRegByte>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	461a      	mov	r2, r3
 80006c4:	0091      	lsls	r1, r2, #2
 80006c6:	461a      	mov	r2, r3
 80006c8:	460b      	mov	r3, r1
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80006d0:	2006      	movs	r0, #6
 80006d2:	f7ff ffa5 	bl	8000620 <DS1307_GetRegByte>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f8fb 	bl	80008d4 <DS1307_DecodeBCD>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4413      	add	r3, r2
 80006e6:	b29b      	uxth	r3, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff ff93 	bl	8000620 <DS1307_GetRegByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8e6 	bl	80008d4 <DS1307_DecodeBCD>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}

0800070e <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ff84 	bl	8000620 <DS1307_GetRegByte>
 8000718:	4603      	mov	r3, r0
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f8da 	bl	80008d4 <DS1307_DecodeBCD>
 8000720:	4603      	mov	r3, r0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}

08000726 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ff78 	bl	8000620 <DS1307_GetRegByte>
 8000730:	4603      	mov	r3, r0
 8000732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f8cb 	bl	80008d4 <DS1307_DecodeBCD>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}

08000744 <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 8000748:	2008      	movs	r0, #8
 800074a:	f7ff ff69 	bl	8000620 <DS1307_GetRegByte>
 800074e:	4603      	mov	r3, r0
 8000750:	b25b      	sxtb	r3, r3
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}

08000756 <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 800075a:	2009      	movs	r0, #9
 800075c:	f7ff ff60 	bl	8000620 <DS1307_GetRegByte>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}

08000766 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f8c8 	bl	8000908 <DS1307_EncodeBCD>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff ff31 	bl	80005e4 <DS1307_SetRegByte>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8b6 	bl	8000908 <DS1307_EncodeBCD>
 800079c:	4603      	mov	r3, r0
 800079e:	4619      	mov	r1, r3
 80007a0:	2004      	movs	r0, #4
 80007a2:	f7ff ff1f 	bl	80005e4 <DS1307_SetRegByte>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8a4 	bl	8000908 <DS1307_EncodeBCD>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4619      	mov	r1, r3
 80007c4:	2005      	movs	r0, #5
 80007c6:	f7ff ff0d 	bl	80005e4 <DS1307_SetRegByte>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <DS1307_SetYear+0x50>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	2010      	movs	r0, #16
 80007f0:	f7ff fef8 	bl	80005e4 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <DS1307_SetYear+0x50>)
 80007f8:	fba2 1203 	umull	r1, r2, r2, r3
 80007fc:	0952      	lsrs	r2, r2, #5
 80007fe:	2164      	movs	r1, #100	; 0x64
 8000800:	fb01 f202 	mul.w	r2, r1, r2
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f87c 	bl	8000908 <DS1307_EncodeBCD>
 8000810:	4603      	mov	r3, r0
 8000812:	4619      	mov	r1, r3
 8000814:	2006      	movs	r0, #6
 8000816:	f7ff fee5 	bl	80005e4 <DS1307_SetRegByte>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	51eb851f 	.word	0x51eb851f

08000828 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f864 	bl	8000908 <DS1307_EncodeBCD>
 8000840:	4603      	mov	r3, r0
 8000842:	4619      	mov	r1, r3
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fecd 	bl	80005e4 <DS1307_SetRegByte>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f852 	bl	8000908 <DS1307_EncodeBCD>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff febb 	bl	80005e4 <DS1307_SetRegByte>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8000880:	f7ff fea3 	bl	80005ca <DS1307_GetClockHalt>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4313      	orrs	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f839 	bl	8000908 <DS1307_EncodeBCD>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fea2 	bl	80005e4 <DS1307_SetRegByte>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4619      	mov	r1, r3
 80008bc:	2008      	movs	r0, #8
 80008be:	f7ff fe91 	bl	80005e4 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4619      	mov	r1, r3
 80008c6:	2009      	movs	r0, #9
 80008c8:	f7ff fe8c 	bl	80005e4 <DS1307_SetRegByte>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <DS1307_EncodeBCD+0x40>)
 8000916:	fba3 1302 	umull	r1, r3, r3, r2
 800091a:	08d9      	lsrs	r1, r3, #3
 800091c:	460b      	mov	r3, r1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	b2da      	uxtb	r2, r3
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4907      	ldr	r1, [pc, #28]	; (8000948 <DS1307_EncodeBCD+0x40>)
 800092c:	fba1 1303 	umull	r1, r3, r1, r3
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b2db      	uxtb	r3, r3
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	cccccccd 	.word	0xcccccccd

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000950:	b090      	sub	sp, #64	; 0x40
 8000952:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fac0 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f8b4 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f94a 	bl	8000bf4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000960:	f000 f91a 	bl	8000b98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	4848      	ldr	r0, [pc, #288]	; (8000a8c <main+0x140>)
 800096c:	f000 fdf8 	bl	8001560 <HAL_GPIO_WritePin>

  /* Lookup table for the days of week. */
  	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 8000970:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <main+0x144>)
 8000972:	1d3c      	adds	r4, r7, #4
 8000974:	461d      	mov	r5, r3
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800097e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
  	DS1307_Init(&hi2c1);
 8000982:	4844      	ldr	r0, [pc, #272]	; (8000a94 <main+0x148>)
 8000984:	f7ff fdf0 	bl	8000568 <DS1307_Init>
  	/* To test leap year correction. */
  	DS1307_SetTimeZone(+8, 00);
 8000988:	2100      	movs	r1, #0
 800098a:	2008      	movs	r0, #8
 800098c:	f7ff ff8c 	bl	80008a8 <DS1307_SetTimeZone>
  	DS1307_SetDate(29);
 8000990:	201d      	movs	r0, #29
 8000992:	f7ff fefa 	bl	800078a <DS1307_SetDate>
  	DS1307_SetMonth(2);
 8000996:	2002      	movs	r0, #2
 8000998:	f7ff ff09 	bl	80007ae <DS1307_SetMonth>
  	DS1307_SetYear(2024);
 800099c:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 80009a0:	f7ff ff18 	bl	80007d4 <DS1307_SetYear>
  	DS1307_SetDayOfWeek(4);
 80009a4:	2004      	movs	r0, #4
 80009a6:	f7ff fede 	bl	8000766 <DS1307_SetDayOfWeek>
  	DS1307_SetHour(23);
 80009aa:	2017      	movs	r0, #23
 80009ac:	f7ff ff3c 	bl	8000828 <DS1307_SetHour>
  	DS1307_SetMinute(59);
 80009b0:	203b      	movs	r0, #59	; 0x3b
 80009b2:	f7ff ff4e 	bl	8000852 <DS1307_SetMinute>
  	DS1307_SetSecond(30);
 80009b6:	201e      	movs	r0, #30
 80009b8:	f7ff ff5d 	bl	8000876 <DS1307_SetSecond>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		/* Get current date and time. */
			 date = DS1307_GetDate();
 80009bc:	f7ff fe5e 	bl	800067c <DS1307_GetDate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <main+0x14c>)
 80009c6:	701a      	strb	r2, [r3, #0]
			 month = DS1307_GetMonth();
 80009c8:	f7ff fe64 	bl	8000694 <DS1307_GetMonth>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <main+0x150>)
 80009d2:	701a      	strb	r2, [r3, #0]
			 year = DS1307_GetYear();
 80009d4:	f7ff fe6a 	bl	80006ac <DS1307_GetYear>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <main+0x154>)
 80009de:	801a      	strh	r2, [r3, #0]
			 dow = DS1307_GetDayOfWeek();
 80009e0:	f7ff fe40 	bl	8000664 <DS1307_GetDayOfWeek>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <main+0x158>)
 80009ea:	701a      	strb	r2, [r3, #0]
			 hour = DS1307_GetHour();
 80009ec:	f7ff fe80 	bl	80006f0 <DS1307_GetHour>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <main+0x15c>)
 80009f6:	701a      	strb	r2, [r3, #0]
			 minute = DS1307_GetMinute();
 80009f8:	f7ff fe89 	bl	800070e <DS1307_GetMinute>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <main+0x160>)
 8000a02:	701a      	strb	r2, [r3, #0]
			second = DS1307_GetSecond();
 8000a04:	f7ff fe8f 	bl	8000726 <DS1307_GetSecond>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <main+0x164>)
 8000a0e:	701a      	strb	r2, [r3, #0]
			 zone_hr = DS1307_GetTimeZoneHour();
 8000a10:	f7ff fe98 	bl	8000744 <DS1307_GetTimeZoneHour>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <main+0x168>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			 zone_min = DS1307_GetTimeZoneMin();
 8000a1c:	f7ff fe9b 	bl	8000756 <DS1307_GetTimeZoneMin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <main+0x16c>)
 8000a26:	701a      	strb	r2, [r3, #0]

			sprintf(buffer, "ISO8601 FORMAT: %04d-%02d-%02dT%02d:%02d:%02d%+03d:%02d  %s\n",
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <main+0x154>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <main+0x150>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	469e      	mov	lr, r3
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <main+0x14c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <main+0x15c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <main+0x160>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <main+0x164>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461c      	mov	r4, r3
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <main+0x168>)
 8000a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a52:	461d      	mov	r5, r3
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <main+0x16c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461e      	mov	r6, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <main+0x158>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	f107 0820 	add.w	r8, r7, #32
 8000a64:	4443      	add	r3, r8
 8000a66:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a6a:	9306      	str	r3, [sp, #24]
 8000a6c:	9605      	str	r6, [sp, #20]
 8000a6e:	9504      	str	r5, [sp, #16]
 8000a70:	9403      	str	r4, [sp, #12]
 8000a72:	9002      	str	r0, [sp, #8]
 8000a74:	9101      	str	r1, [sp, #4]
 8000a76:	9200      	str	r2, [sp, #0]
 8000a78:	4673      	mov	r3, lr
 8000a7a:	4662      	mov	r2, ip
 8000a7c:	490f      	ldr	r1, [pc, #60]	; (8000abc <main+0x170>)
 8000a7e:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <main+0x174>)
 8000a80:	f002 f9b0 	bl	8002de4 <siprintf>
					year, month, date, hour, minute, second, zone_hr, zone_min, DAYS_OF_WEEK[dow]);
			/* May show warning below. Ignore and proceed. */
			//HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
			HAL_Delay(250);
 8000a84:	20fa      	movs	r0, #250	; 0xfa
 8000a86:	f000 fa99 	bl	8000fbc <HAL_Delay>
  {
 8000a8a:	e797      	b.n	80009bc <main+0x70>
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	080036dc 	.word	0x080036dc
 8000a94:	20000104 	.word	0x20000104
 8000a98:	20000160 	.word	0x20000160
 8000a9c:	20000158 	.word	0x20000158
 8000aa0:	2000015e 	.word	0x2000015e
 8000aa4:	20000159 	.word	0x20000159
 8000aa8:	2000015d 	.word	0x2000015d
 8000aac:	2000015c 	.word	0x2000015c
 8000ab0:	2000015a 	.word	0x2000015a
 8000ab4:	2000015b 	.word	0x2000015b
 8000ab8:	20000100 	.word	0x20000100
 8000abc:	0800369c 	.word	0x0800369c
 8000ac0:	2000008c 	.word	0x2000008c

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f97e 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <SystemClock_Config+0xcc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b38:	23a8      	movs	r3, #168	; 0xa8
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fcb9 	bl	80024c0 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f000 f8a0 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2105      	movs	r1, #5
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 ff1a 	bl	80029b0 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b82:	f000 f889 	bl	8000c98 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f000 fcdd 	bl	8001594 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f85a 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000104 	.word	0x20000104
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_GPIO_Init+0x9c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0xa0>)
 8000c66:	f000 fc7b 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0xa0>)
 8000c84:	f000 fad0 	bl	8001228 <HAL_GPIO_Init>

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_MspInit+0x58>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <HAL_MspInit+0x58>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x58>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_MspInit+0x58>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_MspInit+0x58>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x58>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f000 fa67 	bl	80011ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f000 fa80 	bl	80011f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_I2C_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3e:	23c0      	movs	r3, #192	; 0xc0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_I2C_MspInit+0x8c>)
 8000d5a:	f000 fa65 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8ce 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f001 ffac 	bl	8002d80 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200000f0 	.word	0x200000f0
 8000e5c:	20000178 	.word	0x20000178

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f001 ff6b 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fd49 	bl	800094c <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	20000178 	.word	0x20000178

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f94f 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff feca 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f967 	bl	800120e <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f92f 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000164 	.word	0x20000164

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000164 	.word	0x20000164

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff29 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff3e 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff8e 	bl	80010f8 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5d 	bl	80010a4 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff31 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa2 	bl	8001160 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e16b      	b.n	800151c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 815a 	bne.w	8001516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b4 	beq.w	8001516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a5f      	ldr	r2, [pc, #380]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_GPIO_Init+0x310>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x314>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02b      	beq.n	800144e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x318>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x31c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x320>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x324>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x216>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x328>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x212>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x32c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x330>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x20a>
 800142e:	2307      	movs	r3, #7
 8001430:	e00e      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001432:	2308      	movs	r3, #8
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001436:	2306      	movs	r3, #6
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x310>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_GPIO_Init+0x334>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_GPIO_Init+0x334>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_GPIO_Init+0x334>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_GPIO_Init+0x334>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae90 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e12b      	b.n	80017fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fba0 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015f8:	f001 fbae 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a81      	ldr	r2, [pc, #516]	; (8001808 <HAL_I2C_Init+0x274>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d807      	bhi.n	8001618 <HAL_I2C_Init+0x84>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a80      	ldr	r2, [pc, #512]	; (800180c <HAL_I2C_Init+0x278>)
 800160c:	4293      	cmp	r3, r2
 800160e:	bf94      	ite	ls
 8001610:	2301      	movls	r3, #1
 8001612:	2300      	movhi	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e006      	b.n	8001626 <HAL_I2C_Init+0x92>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a7d      	ldr	r2, [pc, #500]	; (8001810 <HAL_I2C_Init+0x27c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	bf94      	ite	ls
 8001620:	2301      	movls	r3, #1
 8001622:	2300      	movhi	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0e7      	b.n	80017fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a78      	ldr	r2, [pc, #480]	; (8001814 <HAL_I2C_Init+0x280>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_I2C_Init+0x274>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d802      	bhi.n	8001668 <HAL_I2C_Init+0xd4>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3301      	adds	r3, #1
 8001666:	e009      	b.n	800167c <HAL_I2C_Init+0xe8>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_I2C_Init+0x284>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	3301      	adds	r3, #1
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	430b      	orrs	r3, r1
 8001682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800168e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	495c      	ldr	r1, [pc, #368]	; (8001808 <HAL_I2C_Init+0x274>)
 8001698:	428b      	cmp	r3, r1
 800169a:	d819      	bhi.n	80016d0 <HAL_I2C_Init+0x13c>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e59      	subs	r1, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016aa:	1c59      	adds	r1, r3, #1
 80016ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016b0:	400b      	ands	r3, r1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HAL_I2C_Init+0x138>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e59      	subs	r1, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	e051      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e04f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_I2C_Init+0x168>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e012      	b.n	8001722 <HAL_I2C_Init+0x18e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	0099      	lsls	r1, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Init+0x196>
 8001726:	2301      	movs	r3, #1
 8001728:	e022      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10e      	bne.n	8001750 <HAL_I2C_Init+0x1bc>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e58      	subs	r0, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	fbb0 f3f3 	udiv	r3, r0, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174e:	e00f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e58      	subs	r0, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	0099      	lsls	r1, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	6809      	ldr	r1, [r1, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800179e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6911      	ldr	r1, [r2, #16]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	000186a0 	.word	0x000186a0
 800180c:	001e847f 	.word	0x001e847f
 8001810:	003d08ff 	.word	0x003d08ff
 8001814:	431bde83 	.word	0x431bde83
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	817b      	strh	r3, [r7, #10]
 800182c:	4613      	mov	r3, r2
 800182e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fbb8 	bl	8000fa4 <HAL_GetTick>
 8001834:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	f040 80e0 	bne.w	8001a04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2319      	movs	r3, #25
 800184a:	2201      	movs	r2, #1
 800184c:	4970      	ldr	r1, [pc, #448]	; (8001a10 <HAL_I2C_Master_Transmit+0x1f4>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fc58 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800185a:	2302      	movs	r3, #2
 800185c:	e0d3      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_I2C_Master_Transmit+0x50>
 8001868:	2302      	movs	r3, #2
 800186a:	e0cc      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d007      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2221      	movs	r2, #33	; 0x21
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2210      	movs	r2, #16
 80018ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	893a      	ldrh	r2, [r7, #8]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_I2C_Master_Transmit+0x1f8>)
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d4:	8979      	ldrh	r1, [r7, #10]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fac2 	bl	8001e64 <I2C_MasterRequestWrite>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e08d      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001900:	e066      	b.n	80019d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fcd2 	bl	80022b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b04      	cmp	r3, #4
 8001918:	d107      	bne.n	800192a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d11b      	bne.n	80019a4 <HAL_I2C_Master_Transmit+0x188>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fcc2 	bl	8002332 <I2C_WaitOnBTFFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d107      	bne.n	80019cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e01a      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d194      	bne.n	8001902 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00100002 	.word	0x00100002
 8001a14:	ffff0000 	.word	0xffff0000

08001a18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	460b      	mov	r3, r1
 8001a26:	817b      	strh	r3, [r7, #10]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff faba 	bl	8000fa4 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	f040 820b 	bne.w	8001e56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2319      	movs	r3, #25
 8001a46:	2201      	movs	r2, #1
 8001a48:	497c      	ldr	r1, [pc, #496]	; (8001c3c <HAL_I2C_Master_Receive+0x224>)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fb5a 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	e1fe      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_I2C_Master_Receive+0x50>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e1f7      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d007      	beq.n	8001a8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2222      	movs	r2, #34	; 0x22
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	893a      	ldrh	r2, [r7, #8]
 8001abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_I2C_Master_Receive+0x228>)
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ad0:	8979      	ldrh	r1, [r7, #10]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fa46 	bl	8001f68 <I2C_MasterRequestRead>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1b8      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d113      	bne.n	8001b16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	623b      	str	r3, [r7, #32]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	623b      	str	r3, [r7, #32]
 8001b02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e18c      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d11b      	bne.n	8001b56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e16c      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d11b      	bne.n	8001b96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	e14c      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bbc:	e138      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	f200 80f1 	bhi.w	8001daa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d123      	bne.n	8001c18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fbed 	bl	80023b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e139      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c16:	e10b      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d14e      	bne.n	8001cbe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c26:	2200      	movs	r2, #0
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <HAL_I2C_Master_Receive+0x22c>)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fa6a 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e10e      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
 8001c3a:	bf00      	nop
 8001c3c:	00100002 	.word	0x00100002
 8001c40:	ffff0000 	.word	0xffff0000
 8001c44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cbc:	e0b8      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4966      	ldr	r1, [pc, #408]	; (8001e60 <HAL_I2C_Master_Receive+0x448>)
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fa1b 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0bf      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2200      	movs	r2, #0
 8001d22:	494f      	ldr	r1, [pc, #316]	; (8001e60 <HAL_I2C_Master_Receive+0x448>)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f9ed 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e091      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001da8:	e042      	b.n	8001e30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fb00 	bl	80023b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e04c      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d118      	bne.n	8001e30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f47f aec2 	bne.w	8001bbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	00010004 	.word	0x00010004

08001e64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	460b      	mov	r3, r1
 8001e72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d006      	beq.n	8001e8e <I2C_MasterRequestWrite+0x2a>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d003      	beq.n	8001e8e <I2C_MasterRequestWrite+0x2a>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e8c:	d108      	bne.n	8001ea0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e00b      	b.n	8001eb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d107      	bne.n	8001eb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f91d 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ede:	d103      	bne.n	8001ee8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e035      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef4:	d108      	bne.n	8001f08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e01b      	b.n	8001f40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	11db      	asrs	r3, r3, #7
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 0306 	and.w	r3, r3, #6
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f063 030f 	orn	r3, r3, #15
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <I2C_MasterRequestWrite+0xfc>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f943 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e010      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <I2C_MasterRequestWrite+0x100>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f933 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	00010008 	.word	0x00010008
 8001f64:	00010002 	.word	0x00010002

08001f68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d006      	beq.n	8001fa2 <I2C_MasterRequestRead+0x3a>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <I2C_MasterRequestRead+0x3a>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fa0:	d108      	bne.n	8001fb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e00b      	b.n	8001fcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d107      	bne.n	8001fcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f893 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff2:	d103      	bne.n	8001ffc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e079      	b.n	80020f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002008:	d108      	bne.n	800201c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	e05f      	b.n	80020dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800201c:	897b      	ldrh	r3, [r7, #10]
 800201e:	11db      	asrs	r3, r3, #7
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0306 	and.w	r3, r3, #6
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f063 030f 	orn	r3, r3, #15
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4930      	ldr	r1, [pc, #192]	; (80020fc <I2C_MasterRequestRead+0x194>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f8b9 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e054      	b.n	80020f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4929      	ldr	r1, [pc, #164]	; (8002100 <I2C_MasterRequestRead+0x198>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f8a9 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e044      	b.n	80020f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f831 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b6:	d103      	bne.n	80020c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e017      	b.n	80020f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020c4:	897b      	ldrh	r3, [r7, #10]
 80020c6:	11db      	asrs	r3, r3, #7
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0306 	and.w	r3, r3, #6
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f063 030e 	orn	r3, r3, #14
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <I2C_MasterRequestRead+0x198>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f865 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00010008 	.word	0x00010008
 8002100:	00010002 	.word	0x00010002

08002104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002114:	e025      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d021      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe ff41 	bl	8000fa4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d116      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e023      	b.n	80021aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10d      	bne.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x84>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	e00c      	b.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d0b6      	beq.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c0:	e051      	b.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d123      	bne.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e046      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d021      	beq.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe febf 	bl	8000fa4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e020      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10c      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	e00b      	b.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	43da      	mvns	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4013      	ands	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d18d      	bne.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022bc:	e02d      	b.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8ce 	bl	8002460 <I2C_IsAcknowledgeFailed>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e02d      	b.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d021      	beq.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7fe fe65 	bl	8000fa4 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d116      	bne.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d1ca      	bne.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800233e:	e02d      	b.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f88d 	bl	8002460 <I2C_IsAcknowledgeFailed>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02d      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d021      	beq.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe fe24 	bl	8000fa4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d1ca      	bne.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023c0:	e042      	b.n	8002448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d119      	bne.n	8002404 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0210 	mvn.w	r2, #16
 80023d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e029      	b.n	8002458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002404:	f7fe fdce 	bl	8000fa4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	429a      	cmp	r2, r3
 8002412:	d302      	bcc.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d1b5      	bne.n	80023c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002476:	d11b      	bne.n	80024b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e264      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d075      	beq.n	80025ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024de:	4ba3      	ldr	r3, [pc, #652]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00c      	beq.n	8002504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4ba0      	ldr	r3, [pc, #640]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d112      	bne.n	800251c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f6:	4b9d      	ldr	r3, [pc, #628]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002502:	d10b      	bne.n	800251c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	4b99      	ldr	r3, [pc, #612]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d05b      	beq.n	80025c8 <HAL_RCC_OscConfig+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d157      	bne.n	80025c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e23f      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d106      	bne.n	8002534 <HAL_RCC_OscConfig+0x74>
 8002526:	4b91      	ldr	r3, [pc, #580]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a90      	ldr	r2, [pc, #576]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xb0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x98>
 800253e:	4b8b      	ldr	r3, [pc, #556]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a8a      	ldr	r2, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a87      	ldr	r2, [pc, #540]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xb0>
 8002558:	4b84      	ldr	r3, [pc, #528]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a83      	ldr	r2, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a80      	ldr	r2, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd14 	bl	8000fa4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fd10 	bl	8000fa4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e204      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xc0>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fd00 	bl	8000fa4 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe fcfc 	bl	8000fa4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1f0      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0xe8>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d6:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x152>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c4      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b56      	ldr	r3, [pc, #344]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4952      	ldr	r1, [pc, #328]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_RCC_OscConfig+0x2b0>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fcb5 	bl	8000fa4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe fcb1 	bl	8000fa4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a5      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4940      	ldr	r1, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_OscConfig+0x2b0>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fc94 	bl	8000fa4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002680:	f7fe fc90 	bl	8000fa4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e184      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d030      	beq.n	800270c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d016      	beq.n	80026e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCC_OscConfig+0x2b4>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fc74 	bl	8000fa4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe fc70 	bl	8000fa4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e164      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x200>
 80026de:	e015      	b.n	800270c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_OscConfig+0x2b4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e6:	f7fe fc5d 	bl	8000fa4 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe fc59 	bl	8000fa4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e14d      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a0 	beq.w	800285a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x2b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d121      	bne.n	800279a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_OscConfig+0x2b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_RCC_OscConfig+0x2b8>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe fc1f 	bl	8000fa4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e011      	b.n	800278e <HAL_RCC_OscConfig+0x2ce>
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	42470000 	.word	0x42470000
 8002774:	42470e80 	.word	0x42470e80
 8002778:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fc12 	bl	8000fa4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e106      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x4e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d106      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2f0>
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a80      	ldr	r2, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x32a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x312>
 80027b8:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x32a>
 80027d2:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a74      	ldr	r2, [pc, #464]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fbd7 	bl	8000fa4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fe fbd3 	bl	8000fa4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0c5      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x33a>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe fbc1 	bl	8000fa4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fbbd 	bl	8000fa4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0af      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 809b 	beq.w	800299a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d05c      	beq.n	800292a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d141      	bne.n	80028fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCC_OscConfig+0x4ec>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fb91 	bl	8000fa4 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fb8d 	bl	8000fa4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e081      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	019b      	lsls	r3, r3, #6
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	4937      	ldr	r1, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x4ec>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fb66 	bl	8000fa4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fb62 	bl	8000fa4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e056      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x41c>
 80028fa:	e04e      	b.n	800299a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fb4f 	bl	8000fa4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fb4b 	bl	8000fa4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e03f      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x44a>
 8002928:	e037      	b.n	800299a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e032      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_OscConfig+0x4e8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d028      	beq.n	8002996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d121      	bne.n	8002996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d11a      	bne.n	8002996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002966:	4013      	ands	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296e:	4293      	cmp	r3, r2
 8002970:	d111      	bne.n	8002996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40007000 	.word	0x40007000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470060 	.word	0x42470060

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0cc      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d90c      	bls.n	80029ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d044      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d119      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e067      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4934      	ldr	r1, [pc, #208]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fa80 	bl	8000fa4 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fa7c 	bl	8000fa4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e04f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d20c      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f9e0 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	080036f8 	.word	0x080036f8
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d00d      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x40>
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	f200 80bd 	bhi.w	8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bae:	e0b7      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bb2:	60bb      	str	r3, [r7, #8]
       break;
 8002bb4:	e0b7      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb6:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bb8:	60bb      	str	r3, [r7, #8]
      break;
 8002bba:	e0b4      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bbc:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc6:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d04d      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	ea02 0800 	and.w	r8, r2, r0
 8002bea:	ea03 0901 	and.w	r9, r3, r1
 8002bee:	4640      	mov	r0, r8
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	014b      	lsls	r3, r1, #5
 8002bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c00:	0142      	lsls	r2, r0, #5
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	ebb0 0008 	subs.w	r0, r0, r8
 8002c0a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c1c:	0182      	lsls	r2, r0, #6
 8002c1e:	1a12      	subs	r2, r2, r0
 8002c20:	eb63 0301 	sbc.w	r3, r3, r1
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	00d9      	lsls	r1, r3, #3
 8002c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c32:	00d0      	lsls	r0, r2, #3
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	eb12 0208 	adds.w	r2, r2, r8
 8002c3c:	eb43 0309 	adc.w	r3, r3, r9
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	0259      	lsls	r1, r3, #9
 8002c4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c4e:	0250      	lsls	r0, r2, #9
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f7fd fb06 	bl	8000270 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e04a      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	461a      	mov	r2, r3
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	ea02 0400 	and.w	r4, r2, r0
 8002c86:	ea03 0501 	and.w	r5, r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	014b      	lsls	r3, r1, #5
 8002c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c9c:	0142      	lsls	r2, r0, #5
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	1b00      	subs	r0, r0, r4
 8002ca4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	018b      	lsls	r3, r1, #6
 8002cb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cb6:	0182      	lsls	r2, r0, #6
 8002cb8:	1a12      	subs	r2, r2, r0
 8002cba:	eb63 0301 	sbc.w	r3, r3, r1
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	00d9      	lsls	r1, r3, #3
 8002cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ccc:	00d0      	lsls	r0, r2, #3
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	1912      	adds	r2, r2, r4
 8002cd4:	eb45 0303 	adc.w	r3, r5, r3
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0299      	lsls	r1, r3, #10
 8002ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ce6:	0290      	lsls	r0, r2, #10
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	f7fd faba 	bl	8000270 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	60bb      	str	r3, [r7, #8]
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d22:	60bb      	str	r3, [r7, #8]
      break;
 8002d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d26:	68bb      	ldr	r3, [r7, #8]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	007a1200 	.word	0x007a1200

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08003708 	.word	0x08003708

08002d80 <__errno>:
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <__errno+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4d0d      	ldr	r5, [pc, #52]	; (8002dc4 <__libc_init_array+0x38>)
 8002d90:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	2600      	movs	r6, #0
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	4d0b      	ldr	r5, [pc, #44]	; (8002dcc <__libc_init_array+0x40>)
 8002d9e:	4c0c      	ldr	r4, [pc, #48]	; (8002dd0 <__libc_init_array+0x44>)
 8002da0:	f000 fc4e 	bl	8003640 <_init>
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	2600      	movs	r6, #0
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	0800374c 	.word	0x0800374c
 8002dc8:	0800374c 	.word	0x0800374c
 8002dcc:	0800374c 	.word	0x0800374c
 8002dd0:	08003750 	.word	0x08003750

08002dd4 <memset>:
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <siprintf>:
 8002de4:	b40e      	push	{r1, r2, r3}
 8002de6:	b500      	push	{lr}
 8002de8:	b09c      	sub	sp, #112	; 0x70
 8002dea:	ab1d      	add	r3, sp, #116	; 0x74
 8002dec:	9002      	str	r0, [sp, #8]
 8002dee:	9006      	str	r0, [sp, #24]
 8002df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df4:	4809      	ldr	r0, [pc, #36]	; (8002e1c <siprintf+0x38>)
 8002df6:	9107      	str	r1, [sp, #28]
 8002df8:	9104      	str	r1, [sp, #16]
 8002dfa:	4909      	ldr	r1, [pc, #36]	; (8002e20 <siprintf+0x3c>)
 8002dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e00:	9105      	str	r1, [sp, #20]
 8002e02:	6800      	ldr	r0, [r0, #0]
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	a902      	add	r1, sp, #8
 8002e08:	f000 f868 	bl	8002edc <_svfiprintf_r>
 8002e0c:	9b02      	ldr	r3, [sp, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	b01c      	add	sp, #112	; 0x70
 8002e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e18:	b003      	add	sp, #12
 8002e1a:	4770      	bx	lr
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	ffff0208 	.word	0xffff0208

08002e24 <__ssputs_r>:
 8002e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	688e      	ldr	r6, [r1, #8]
 8002e2a:	429e      	cmp	r6, r3
 8002e2c:	4682      	mov	sl, r0
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4690      	mov	r8, r2
 8002e32:	461f      	mov	r7, r3
 8002e34:	d838      	bhi.n	8002ea8 <__ssputs_r+0x84>
 8002e36:	898a      	ldrh	r2, [r1, #12]
 8002e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e3c:	d032      	beq.n	8002ea4 <__ssputs_r+0x80>
 8002e3e:	6825      	ldr	r5, [r4, #0]
 8002e40:	6909      	ldr	r1, [r1, #16]
 8002e42:	eba5 0901 	sub.w	r9, r5, r1
 8002e46:	6965      	ldr	r5, [r4, #20]
 8002e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e50:	3301      	adds	r3, #1
 8002e52:	444b      	add	r3, r9
 8002e54:	106d      	asrs	r5, r5, #1
 8002e56:	429d      	cmp	r5, r3
 8002e58:	bf38      	it	cc
 8002e5a:	461d      	movcc	r5, r3
 8002e5c:	0553      	lsls	r3, r2, #21
 8002e5e:	d531      	bpl.n	8002ec4 <__ssputs_r+0xa0>
 8002e60:	4629      	mov	r1, r5
 8002e62:	f000 fb47 	bl	80034f4 <_malloc_r>
 8002e66:	4606      	mov	r6, r0
 8002e68:	b950      	cbnz	r0, 8002e80 <__ssputs_r+0x5c>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	f8ca 3000 	str.w	r3, [sl]
 8002e70:	89a3      	ldrh	r3, [r4, #12]
 8002e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e80:	6921      	ldr	r1, [r4, #16]
 8002e82:	464a      	mov	r2, r9
 8002e84:	f000 fabe 	bl	8003404 <memcpy>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	6126      	str	r6, [r4, #16]
 8002e96:	6165      	str	r5, [r4, #20]
 8002e98:	444e      	add	r6, r9
 8002e9a:	eba5 0509 	sub.w	r5, r5, r9
 8002e9e:	6026      	str	r6, [r4, #0]
 8002ea0:	60a5      	str	r5, [r4, #8]
 8002ea2:	463e      	mov	r6, r7
 8002ea4:	42be      	cmp	r6, r7
 8002ea6:	d900      	bls.n	8002eaa <__ssputs_r+0x86>
 8002ea8:	463e      	mov	r6, r7
 8002eaa:	4632      	mov	r2, r6
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	4641      	mov	r1, r8
 8002eb0:	f000 fab6 	bl	8003420 <memmove>
 8002eb4:	68a3      	ldr	r3, [r4, #8]
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	1b9b      	subs	r3, r3, r6
 8002eba:	4432      	add	r2, r6
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	6022      	str	r2, [r4, #0]
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	e7db      	b.n	8002e7c <__ssputs_r+0x58>
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	f000 fb6f 	bl	80035a8 <_realloc_r>
 8002eca:	4606      	mov	r6, r0
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d1e1      	bne.n	8002e94 <__ssputs_r+0x70>
 8002ed0:	6921      	ldr	r1, [r4, #16]
 8002ed2:	4650      	mov	r0, sl
 8002ed4:	f000 fabe 	bl	8003454 <_free_r>
 8002ed8:	e7c7      	b.n	8002e6a <__ssputs_r+0x46>
	...

08002edc <_svfiprintf_r>:
 8002edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee0:	4698      	mov	r8, r3
 8002ee2:	898b      	ldrh	r3, [r1, #12]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	b09d      	sub	sp, #116	; 0x74
 8002ee8:	4607      	mov	r7, r0
 8002eea:	460d      	mov	r5, r1
 8002eec:	4614      	mov	r4, r2
 8002eee:	d50e      	bpl.n	8002f0e <_svfiprintf_r+0x32>
 8002ef0:	690b      	ldr	r3, [r1, #16]
 8002ef2:	b963      	cbnz	r3, 8002f0e <_svfiprintf_r+0x32>
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	f000 fafd 	bl	80034f4 <_malloc_r>
 8002efa:	6028      	str	r0, [r5, #0]
 8002efc:	6128      	str	r0, [r5, #16]
 8002efe:	b920      	cbnz	r0, 8002f0a <_svfiprintf_r+0x2e>
 8002f00:	230c      	movs	r3, #12
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	e0d1      	b.n	80030ae <_svfiprintf_r+0x1d2>
 8002f0a:	2340      	movs	r3, #64	; 0x40
 8002f0c:	616b      	str	r3, [r5, #20]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9309      	str	r3, [sp, #36]	; 0x24
 8002f12:	2320      	movs	r3, #32
 8002f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f1c:	2330      	movs	r3, #48	; 0x30
 8002f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030c8 <_svfiprintf_r+0x1ec>
 8002f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f26:	f04f 0901 	mov.w	r9, #1
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f32:	b10a      	cbz	r2, 8002f38 <_svfiprintf_r+0x5c>
 8002f34:	2a25      	cmp	r2, #37	; 0x25
 8002f36:	d1f9      	bne.n	8002f2c <_svfiprintf_r+0x50>
 8002f38:	ebba 0b04 	subs.w	fp, sl, r4
 8002f3c:	d00b      	beq.n	8002f56 <_svfiprintf_r+0x7a>
 8002f3e:	465b      	mov	r3, fp
 8002f40:	4622      	mov	r2, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	4638      	mov	r0, r7
 8002f46:	f7ff ff6d 	bl	8002e24 <__ssputs_r>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f000 80aa 	beq.w	80030a4 <_svfiprintf_r+0x1c8>
 8002f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f52:	445a      	add	r2, fp
 8002f54:	9209      	str	r2, [sp, #36]	; 0x24
 8002f56:	f89a 3000 	ldrb.w	r3, [sl]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a2 	beq.w	80030a4 <_svfiprintf_r+0x1c8>
 8002f60:	2300      	movs	r3, #0
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295
 8002f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f6a:	f10a 0a01 	add.w	sl, sl, #1
 8002f6e:	9304      	str	r3, [sp, #16]
 8002f70:	9307      	str	r3, [sp, #28]
 8002f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f76:	931a      	str	r3, [sp, #104]	; 0x68
 8002f78:	4654      	mov	r4, sl
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f80:	4851      	ldr	r0, [pc, #324]	; (80030c8 <_svfiprintf_r+0x1ec>)
 8002f82:	f7fd f925 	bl	80001d0 <memchr>
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	b9d8      	cbnz	r0, 8002fc2 <_svfiprintf_r+0xe6>
 8002f8a:	06d0      	lsls	r0, r2, #27
 8002f8c:	bf44      	itt	mi
 8002f8e:	2320      	movmi	r3, #32
 8002f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f94:	0711      	lsls	r1, r2, #28
 8002f96:	bf44      	itt	mi
 8002f98:	232b      	movmi	r3, #43	; 0x2b
 8002f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa4:	d015      	beq.n	8002fd2 <_svfiprintf_r+0xf6>
 8002fa6:	9a07      	ldr	r2, [sp, #28]
 8002fa8:	4654      	mov	r4, sl
 8002faa:	2000      	movs	r0, #0
 8002fac:	f04f 0c0a 	mov.w	ip, #10
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb6:	3b30      	subs	r3, #48	; 0x30
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d94e      	bls.n	800305a <_svfiprintf_r+0x17e>
 8002fbc:	b1b0      	cbz	r0, 8002fec <_svfiprintf_r+0x110>
 8002fbe:	9207      	str	r2, [sp, #28]
 8002fc0:	e014      	b.n	8002fec <_svfiprintf_r+0x110>
 8002fc2:	eba0 0308 	sub.w	r3, r0, r8
 8002fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	9304      	str	r3, [sp, #16]
 8002fce:	46a2      	mov	sl, r4
 8002fd0:	e7d2      	b.n	8002f78 <_svfiprintf_r+0x9c>
 8002fd2:	9b03      	ldr	r3, [sp, #12]
 8002fd4:	1d19      	adds	r1, r3, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	9103      	str	r1, [sp, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfbb      	ittet	lt
 8002fde:	425b      	neglt	r3, r3
 8002fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fe4:	9307      	strge	r3, [sp, #28]
 8002fe6:	9307      	strlt	r3, [sp, #28]
 8002fe8:	bfb8      	it	lt
 8002fea:	9204      	strlt	r2, [sp, #16]
 8002fec:	7823      	ldrb	r3, [r4, #0]
 8002fee:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff0:	d10c      	bne.n	800300c <_svfiprintf_r+0x130>
 8002ff2:	7863      	ldrb	r3, [r4, #1]
 8002ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff6:	d135      	bne.n	8003064 <_svfiprintf_r+0x188>
 8002ff8:	9b03      	ldr	r3, [sp, #12]
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	9203      	str	r2, [sp, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	bfb8      	it	lt
 8003004:	f04f 33ff 	movlt.w	r3, #4294967295
 8003008:	3402      	adds	r4, #2
 800300a:	9305      	str	r3, [sp, #20]
 800300c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030d8 <_svfiprintf_r+0x1fc>
 8003010:	7821      	ldrb	r1, [r4, #0]
 8003012:	2203      	movs	r2, #3
 8003014:	4650      	mov	r0, sl
 8003016:	f7fd f8db 	bl	80001d0 <memchr>
 800301a:	b140      	cbz	r0, 800302e <_svfiprintf_r+0x152>
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	eba0 000a 	sub.w	r0, r0, sl
 8003022:	fa03 f000 	lsl.w	r0, r3, r0
 8003026:	9b04      	ldr	r3, [sp, #16]
 8003028:	4303      	orrs	r3, r0
 800302a:	3401      	adds	r4, #1
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003032:	4826      	ldr	r0, [pc, #152]	; (80030cc <_svfiprintf_r+0x1f0>)
 8003034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003038:	2206      	movs	r2, #6
 800303a:	f7fd f8c9 	bl	80001d0 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d038      	beq.n	80030b4 <_svfiprintf_r+0x1d8>
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <_svfiprintf_r+0x1f4>)
 8003044:	bb1b      	cbnz	r3, 800308e <_svfiprintf_r+0x1b2>
 8003046:	9b03      	ldr	r3, [sp, #12]
 8003048:	3307      	adds	r3, #7
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	3308      	adds	r3, #8
 8003050:	9303      	str	r3, [sp, #12]
 8003052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003054:	4433      	add	r3, r6
 8003056:	9309      	str	r3, [sp, #36]	; 0x24
 8003058:	e767      	b.n	8002f2a <_svfiprintf_r+0x4e>
 800305a:	fb0c 3202 	mla	r2, ip, r2, r3
 800305e:	460c      	mov	r4, r1
 8003060:	2001      	movs	r0, #1
 8003062:	e7a5      	b.n	8002fb0 <_svfiprintf_r+0xd4>
 8003064:	2300      	movs	r3, #0
 8003066:	3401      	adds	r4, #1
 8003068:	9305      	str	r3, [sp, #20]
 800306a:	4619      	mov	r1, r3
 800306c:	f04f 0c0a 	mov.w	ip, #10
 8003070:	4620      	mov	r0, r4
 8003072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003076:	3a30      	subs	r2, #48	; 0x30
 8003078:	2a09      	cmp	r2, #9
 800307a:	d903      	bls.n	8003084 <_svfiprintf_r+0x1a8>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0c5      	beq.n	800300c <_svfiprintf_r+0x130>
 8003080:	9105      	str	r1, [sp, #20]
 8003082:	e7c3      	b.n	800300c <_svfiprintf_r+0x130>
 8003084:	fb0c 2101 	mla	r1, ip, r1, r2
 8003088:	4604      	mov	r4, r0
 800308a:	2301      	movs	r3, #1
 800308c:	e7f0      	b.n	8003070 <_svfiprintf_r+0x194>
 800308e:	ab03      	add	r3, sp, #12
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	462a      	mov	r2, r5
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <_svfiprintf_r+0x1f8>)
 8003096:	a904      	add	r1, sp, #16
 8003098:	4638      	mov	r0, r7
 800309a:	f3af 8000 	nop.w
 800309e:	1c42      	adds	r2, r0, #1
 80030a0:	4606      	mov	r6, r0
 80030a2:	d1d6      	bne.n	8003052 <_svfiprintf_r+0x176>
 80030a4:	89ab      	ldrh	r3, [r5, #12]
 80030a6:	065b      	lsls	r3, r3, #25
 80030a8:	f53f af2c 	bmi.w	8002f04 <_svfiprintf_r+0x28>
 80030ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ae:	b01d      	add	sp, #116	; 0x74
 80030b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b4:	ab03      	add	r3, sp, #12
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	462a      	mov	r2, r5
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <_svfiprintf_r+0x1f8>)
 80030bc:	a904      	add	r1, sp, #16
 80030be:	4638      	mov	r0, r7
 80030c0:	f000 f87a 	bl	80031b8 <_printf_i>
 80030c4:	e7eb      	b.n	800309e <_svfiprintf_r+0x1c2>
 80030c6:	bf00      	nop
 80030c8:	08003710 	.word	0x08003710
 80030cc:	0800371a 	.word	0x0800371a
 80030d0:	00000000 	.word	0x00000000
 80030d4:	08002e25 	.word	0x08002e25
 80030d8:	08003716 	.word	0x08003716

080030dc <_printf_common>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	4616      	mov	r6, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	690b      	ldr	r3, [r1, #16]
 80030e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfb8      	it	lt
 80030f0:	4613      	movlt	r3, r2
 80030f2:	6033      	str	r3, [r6, #0]
 80030f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f8:	4607      	mov	r7, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	b10a      	cbz	r2, 8003102 <_printf_common+0x26>
 80030fe:	3301      	adds	r3, #1
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0699      	lsls	r1, r3, #26
 8003106:	bf42      	ittt	mi
 8003108:	6833      	ldrmi	r3, [r6, #0]
 800310a:	3302      	addmi	r3, #2
 800310c:	6033      	strmi	r3, [r6, #0]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d106      	bne.n	8003124 <_printf_common+0x48>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	6832      	ldr	r2, [r6, #0]
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dc26      	bgt.n	8003172 <_printf_common+0x96>
 8003124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003128:	1e13      	subs	r3, r2, #0
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
 8003130:	0692      	lsls	r2, r2, #26
 8003132:	d42b      	bmi.n	800318c <_printf_common+0xb0>
 8003134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d01e      	beq.n	8003180 <_printf_common+0xa4>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	68e5      	ldr	r5, [r4, #12]
 8003146:	6832      	ldr	r2, [r6, #0]
 8003148:	f003 0306 	and.w	r3, r3, #6
 800314c:	2b04      	cmp	r3, #4
 800314e:	bf08      	it	eq
 8003150:	1aad      	subeq	r5, r5, r2
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	6922      	ldr	r2, [r4, #16]
 8003156:	bf0c      	ite	eq
 8003158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800315c:	2500      	movne	r5, #0
 800315e:	4293      	cmp	r3, r2
 8003160:	bfc4      	itt	gt
 8003162:	1a9b      	subgt	r3, r3, r2
 8003164:	18ed      	addgt	r5, r5, r3
 8003166:	2600      	movs	r6, #0
 8003168:	341a      	adds	r4, #26
 800316a:	42b5      	cmp	r5, r6
 800316c:	d11a      	bne.n	80031a4 <_printf_common+0xc8>
 800316e:	2000      	movs	r0, #0
 8003170:	e008      	b.n	8003184 <_printf_common+0xa8>
 8003172:	2301      	movs	r3, #1
 8003174:	4652      	mov	r2, sl
 8003176:	4649      	mov	r1, r9
 8003178:	4638      	mov	r0, r7
 800317a:	47c0      	blx	r8
 800317c:	3001      	adds	r0, #1
 800317e:	d103      	bne.n	8003188 <_printf_common+0xac>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	3501      	adds	r5, #1
 800318a:	e7c6      	b.n	800311a <_printf_common+0x3e>
 800318c:	18e1      	adds	r1, r4, r3
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	2030      	movs	r0, #48	; 0x30
 8003192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003196:	4422      	add	r2, r4
 8003198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a0:	3302      	adds	r3, #2
 80031a2:	e7c7      	b.n	8003134 <_printf_common+0x58>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4622      	mov	r2, r4
 80031a8:	4649      	mov	r1, r9
 80031aa:	4638      	mov	r0, r7
 80031ac:	47c0      	blx	r8
 80031ae:	3001      	adds	r0, #1
 80031b0:	d0e6      	beq.n	8003180 <_printf_common+0xa4>
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7d9      	b.n	800316a <_printf_common+0x8e>
	...

080031b8 <_printf_i>:
 80031b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	460c      	mov	r4, r1
 80031be:	4691      	mov	r9, r2
 80031c0:	7e27      	ldrb	r7, [r4, #24]
 80031c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031c4:	2f78      	cmp	r7, #120	; 0x78
 80031c6:	4680      	mov	r8, r0
 80031c8:	469a      	mov	sl, r3
 80031ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031ce:	d807      	bhi.n	80031e0 <_printf_i+0x28>
 80031d0:	2f62      	cmp	r7, #98	; 0x62
 80031d2:	d80a      	bhi.n	80031ea <_printf_i+0x32>
 80031d4:	2f00      	cmp	r7, #0
 80031d6:	f000 80d8 	beq.w	800338a <_printf_i+0x1d2>
 80031da:	2f58      	cmp	r7, #88	; 0x58
 80031dc:	f000 80a3 	beq.w	8003326 <_printf_i+0x16e>
 80031e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e8:	e03a      	b.n	8003260 <_printf_i+0xa8>
 80031ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ee:	2b15      	cmp	r3, #21
 80031f0:	d8f6      	bhi.n	80031e0 <_printf_i+0x28>
 80031f2:	a001      	add	r0, pc, #4	; (adr r0, 80031f8 <_printf_i+0x40>)
 80031f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80031f8:	08003251 	.word	0x08003251
 80031fc:	08003265 	.word	0x08003265
 8003200:	080031e1 	.word	0x080031e1
 8003204:	080031e1 	.word	0x080031e1
 8003208:	080031e1 	.word	0x080031e1
 800320c:	080031e1 	.word	0x080031e1
 8003210:	08003265 	.word	0x08003265
 8003214:	080031e1 	.word	0x080031e1
 8003218:	080031e1 	.word	0x080031e1
 800321c:	080031e1 	.word	0x080031e1
 8003220:	080031e1 	.word	0x080031e1
 8003224:	08003371 	.word	0x08003371
 8003228:	08003295 	.word	0x08003295
 800322c:	08003353 	.word	0x08003353
 8003230:	080031e1 	.word	0x080031e1
 8003234:	080031e1 	.word	0x080031e1
 8003238:	08003393 	.word	0x08003393
 800323c:	080031e1 	.word	0x080031e1
 8003240:	08003295 	.word	0x08003295
 8003244:	080031e1 	.word	0x080031e1
 8003248:	080031e1 	.word	0x080031e1
 800324c:	0800335b 	.word	0x0800335b
 8003250:	680b      	ldr	r3, [r1, #0]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003260:	2301      	movs	r3, #1
 8003262:	e0a3      	b.n	80033ac <_printf_i+0x1f4>
 8003264:	6825      	ldr	r5, [r4, #0]
 8003266:	6808      	ldr	r0, [r1, #0]
 8003268:	062e      	lsls	r6, r5, #24
 800326a:	f100 0304 	add.w	r3, r0, #4
 800326e:	d50a      	bpl.n	8003286 <_printf_i+0xce>
 8003270:	6805      	ldr	r5, [r0, #0]
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	2d00      	cmp	r5, #0
 8003276:	da03      	bge.n	8003280 <_printf_i+0xc8>
 8003278:	232d      	movs	r3, #45	; 0x2d
 800327a:	426d      	negs	r5, r5
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003280:	485e      	ldr	r0, [pc, #376]	; (80033fc <_printf_i+0x244>)
 8003282:	230a      	movs	r3, #10
 8003284:	e019      	b.n	80032ba <_printf_i+0x102>
 8003286:	f015 0f40 	tst.w	r5, #64	; 0x40
 800328a:	6805      	ldr	r5, [r0, #0]
 800328c:	600b      	str	r3, [r1, #0]
 800328e:	bf18      	it	ne
 8003290:	b22d      	sxthne	r5, r5
 8003292:	e7ef      	b.n	8003274 <_printf_i+0xbc>
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	6825      	ldr	r5, [r4, #0]
 8003298:	1d18      	adds	r0, r3, #4
 800329a:	6008      	str	r0, [r1, #0]
 800329c:	0628      	lsls	r0, r5, #24
 800329e:	d501      	bpl.n	80032a4 <_printf_i+0xec>
 80032a0:	681d      	ldr	r5, [r3, #0]
 80032a2:	e002      	b.n	80032aa <_printf_i+0xf2>
 80032a4:	0669      	lsls	r1, r5, #25
 80032a6:	d5fb      	bpl.n	80032a0 <_printf_i+0xe8>
 80032a8:	881d      	ldrh	r5, [r3, #0]
 80032aa:	4854      	ldr	r0, [pc, #336]	; (80033fc <_printf_i+0x244>)
 80032ac:	2f6f      	cmp	r7, #111	; 0x6f
 80032ae:	bf0c      	ite	eq
 80032b0:	2308      	moveq	r3, #8
 80032b2:	230a      	movne	r3, #10
 80032b4:	2100      	movs	r1, #0
 80032b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ba:	6866      	ldr	r6, [r4, #4]
 80032bc:	60a6      	str	r6, [r4, #8]
 80032be:	2e00      	cmp	r6, #0
 80032c0:	bfa2      	ittt	ge
 80032c2:	6821      	ldrge	r1, [r4, #0]
 80032c4:	f021 0104 	bicge.w	r1, r1, #4
 80032c8:	6021      	strge	r1, [r4, #0]
 80032ca:	b90d      	cbnz	r5, 80032d0 <_printf_i+0x118>
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d04d      	beq.n	800336c <_printf_i+0x1b4>
 80032d0:	4616      	mov	r6, r2
 80032d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80032d6:	fb03 5711 	mls	r7, r3, r1, r5
 80032da:	5dc7      	ldrb	r7, [r0, r7]
 80032dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032e0:	462f      	mov	r7, r5
 80032e2:	42bb      	cmp	r3, r7
 80032e4:	460d      	mov	r5, r1
 80032e6:	d9f4      	bls.n	80032d2 <_printf_i+0x11a>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d10b      	bne.n	8003304 <_printf_i+0x14c>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	07df      	lsls	r7, r3, #31
 80032f0:	d508      	bpl.n	8003304 <_printf_i+0x14c>
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	6861      	ldr	r1, [r4, #4]
 80032f6:	4299      	cmp	r1, r3
 80032f8:	bfde      	ittt	le
 80032fa:	2330      	movle	r3, #48	; 0x30
 80032fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003300:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003304:	1b92      	subs	r2, r2, r6
 8003306:	6122      	str	r2, [r4, #16]
 8003308:	f8cd a000 	str.w	sl, [sp]
 800330c:	464b      	mov	r3, r9
 800330e:	aa03      	add	r2, sp, #12
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f7ff fee2 	bl	80030dc <_printf_common>
 8003318:	3001      	adds	r0, #1
 800331a:	d14c      	bne.n	80033b6 <_printf_i+0x1fe>
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	b004      	add	sp, #16
 8003322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003326:	4835      	ldr	r0, [pc, #212]	; (80033fc <_printf_i+0x244>)
 8003328:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	680e      	ldr	r6, [r1, #0]
 8003330:	061f      	lsls	r7, r3, #24
 8003332:	f856 5b04 	ldr.w	r5, [r6], #4
 8003336:	600e      	str	r6, [r1, #0]
 8003338:	d514      	bpl.n	8003364 <_printf_i+0x1ac>
 800333a:	07d9      	lsls	r1, r3, #31
 800333c:	bf44      	itt	mi
 800333e:	f043 0320 	orrmi.w	r3, r3, #32
 8003342:	6023      	strmi	r3, [r4, #0]
 8003344:	b91d      	cbnz	r5, 800334e <_printf_i+0x196>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f023 0320 	bic.w	r3, r3, #32
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	2310      	movs	r3, #16
 8003350:	e7b0      	b.n	80032b4 <_printf_i+0xfc>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f043 0320 	orr.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2378      	movs	r3, #120	; 0x78
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <_printf_i+0x248>)
 800335e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003362:	e7e3      	b.n	800332c <_printf_i+0x174>
 8003364:	065e      	lsls	r6, r3, #25
 8003366:	bf48      	it	mi
 8003368:	b2ad      	uxthmi	r5, r5
 800336a:	e7e6      	b.n	800333a <_printf_i+0x182>
 800336c:	4616      	mov	r6, r2
 800336e:	e7bb      	b.n	80032e8 <_printf_i+0x130>
 8003370:	680b      	ldr	r3, [r1, #0]
 8003372:	6826      	ldr	r6, [r4, #0]
 8003374:	6960      	ldr	r0, [r4, #20]
 8003376:	1d1d      	adds	r5, r3, #4
 8003378:	600d      	str	r5, [r1, #0]
 800337a:	0635      	lsls	r5, r6, #24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	d501      	bpl.n	8003384 <_printf_i+0x1cc>
 8003380:	6018      	str	r0, [r3, #0]
 8003382:	e002      	b.n	800338a <_printf_i+0x1d2>
 8003384:	0671      	lsls	r1, r6, #25
 8003386:	d5fb      	bpl.n	8003380 <_printf_i+0x1c8>
 8003388:	8018      	strh	r0, [r3, #0]
 800338a:	2300      	movs	r3, #0
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	4616      	mov	r6, r2
 8003390:	e7ba      	b.n	8003308 <_printf_i+0x150>
 8003392:	680b      	ldr	r3, [r1, #0]
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	600a      	str	r2, [r1, #0]
 8003398:	681e      	ldr	r6, [r3, #0]
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	2100      	movs	r1, #0
 800339e:	4630      	mov	r0, r6
 80033a0:	f7fc ff16 	bl	80001d0 <memchr>
 80033a4:	b108      	cbz	r0, 80033aa <_printf_i+0x1f2>
 80033a6:	1b80      	subs	r0, r0, r6
 80033a8:	6060      	str	r0, [r4, #4]
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	6123      	str	r3, [r4, #16]
 80033ae:	2300      	movs	r3, #0
 80033b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b4:	e7a8      	b.n	8003308 <_printf_i+0x150>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	4632      	mov	r2, r6
 80033ba:	4649      	mov	r1, r9
 80033bc:	4640      	mov	r0, r8
 80033be:	47d0      	blx	sl
 80033c0:	3001      	adds	r0, #1
 80033c2:	d0ab      	beq.n	800331c <_printf_i+0x164>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	d413      	bmi.n	80033f2 <_printf_i+0x23a>
 80033ca:	68e0      	ldr	r0, [r4, #12]
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	4298      	cmp	r0, r3
 80033d0:	bfb8      	it	lt
 80033d2:	4618      	movlt	r0, r3
 80033d4:	e7a4      	b.n	8003320 <_printf_i+0x168>
 80033d6:	2301      	movs	r3, #1
 80033d8:	4632      	mov	r2, r6
 80033da:	4649      	mov	r1, r9
 80033dc:	4640      	mov	r0, r8
 80033de:	47d0      	blx	sl
 80033e0:	3001      	adds	r0, #1
 80033e2:	d09b      	beq.n	800331c <_printf_i+0x164>
 80033e4:	3501      	adds	r5, #1
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	9903      	ldr	r1, [sp, #12]
 80033ea:	1a5b      	subs	r3, r3, r1
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	dcf2      	bgt.n	80033d6 <_printf_i+0x21e>
 80033f0:	e7eb      	b.n	80033ca <_printf_i+0x212>
 80033f2:	2500      	movs	r5, #0
 80033f4:	f104 0619 	add.w	r6, r4, #25
 80033f8:	e7f5      	b.n	80033e6 <_printf_i+0x22e>
 80033fa:	bf00      	nop
 80033fc:	08003721 	.word	0x08003721
 8003400:	08003732 	.word	0x08003732

08003404 <memcpy>:
 8003404:	440a      	add	r2, r1
 8003406:	4291      	cmp	r1, r2
 8003408:	f100 33ff 	add.w	r3, r0, #4294967295
 800340c:	d100      	bne.n	8003410 <memcpy+0xc>
 800340e:	4770      	bx	lr
 8003410:	b510      	push	{r4, lr}
 8003412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800341a:	4291      	cmp	r1, r2
 800341c:	d1f9      	bne.n	8003412 <memcpy+0xe>
 800341e:	bd10      	pop	{r4, pc}

08003420 <memmove>:
 8003420:	4288      	cmp	r0, r1
 8003422:	b510      	push	{r4, lr}
 8003424:	eb01 0402 	add.w	r4, r1, r2
 8003428:	d902      	bls.n	8003430 <memmove+0x10>
 800342a:	4284      	cmp	r4, r0
 800342c:	4623      	mov	r3, r4
 800342e:	d807      	bhi.n	8003440 <memmove+0x20>
 8003430:	1e43      	subs	r3, r0, #1
 8003432:	42a1      	cmp	r1, r4
 8003434:	d008      	beq.n	8003448 <memmove+0x28>
 8003436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800343a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800343e:	e7f8      	b.n	8003432 <memmove+0x12>
 8003440:	4402      	add	r2, r0
 8003442:	4601      	mov	r1, r0
 8003444:	428a      	cmp	r2, r1
 8003446:	d100      	bne.n	800344a <memmove+0x2a>
 8003448:	bd10      	pop	{r4, pc}
 800344a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800344e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003452:	e7f7      	b.n	8003444 <memmove+0x24>

08003454 <_free_r>:
 8003454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003456:	2900      	cmp	r1, #0
 8003458:	d048      	beq.n	80034ec <_free_r+0x98>
 800345a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345e:	9001      	str	r0, [sp, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f1a1 0404 	sub.w	r4, r1, #4
 8003466:	bfb8      	it	lt
 8003468:	18e4      	addlt	r4, r4, r3
 800346a:	f000 f8d3 	bl	8003614 <__malloc_lock>
 800346e:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <_free_r+0x9c>)
 8003470:	9801      	ldr	r0, [sp, #4]
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	4615      	mov	r5, r2
 8003476:	b933      	cbnz	r3, 8003486 <_free_r+0x32>
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	6014      	str	r4, [r2, #0]
 800347c:	b003      	add	sp, #12
 800347e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003482:	f000 b8cd 	b.w	8003620 <__malloc_unlock>
 8003486:	42a3      	cmp	r3, r4
 8003488:	d90b      	bls.n	80034a2 <_free_r+0x4e>
 800348a:	6821      	ldr	r1, [r4, #0]
 800348c:	1862      	adds	r2, r4, r1
 800348e:	4293      	cmp	r3, r2
 8003490:	bf04      	itt	eq
 8003492:	681a      	ldreq	r2, [r3, #0]
 8003494:	685b      	ldreq	r3, [r3, #4]
 8003496:	6063      	str	r3, [r4, #4]
 8003498:	bf04      	itt	eq
 800349a:	1852      	addeq	r2, r2, r1
 800349c:	6022      	streq	r2, [r4, #0]
 800349e:	602c      	str	r4, [r5, #0]
 80034a0:	e7ec      	b.n	800347c <_free_r+0x28>
 80034a2:	461a      	mov	r2, r3
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b10b      	cbz	r3, 80034ac <_free_r+0x58>
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d9fa      	bls.n	80034a2 <_free_r+0x4e>
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	1855      	adds	r5, r2, r1
 80034b0:	42a5      	cmp	r5, r4
 80034b2:	d10b      	bne.n	80034cc <_free_r+0x78>
 80034b4:	6824      	ldr	r4, [r4, #0]
 80034b6:	4421      	add	r1, r4
 80034b8:	1854      	adds	r4, r2, r1
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	d1dd      	bne.n	800347c <_free_r+0x28>
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	4421      	add	r1, r4
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	e7d7      	b.n	800347c <_free_r+0x28>
 80034cc:	d902      	bls.n	80034d4 <_free_r+0x80>
 80034ce:	230c      	movs	r3, #12
 80034d0:	6003      	str	r3, [r0, #0]
 80034d2:	e7d3      	b.n	800347c <_free_r+0x28>
 80034d4:	6825      	ldr	r5, [r4, #0]
 80034d6:	1961      	adds	r1, r4, r5
 80034d8:	428b      	cmp	r3, r1
 80034da:	bf04      	itt	eq
 80034dc:	6819      	ldreq	r1, [r3, #0]
 80034de:	685b      	ldreq	r3, [r3, #4]
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	bf04      	itt	eq
 80034e4:	1949      	addeq	r1, r1, r5
 80034e6:	6021      	streq	r1, [r4, #0]
 80034e8:	6054      	str	r4, [r2, #4]
 80034ea:	e7c7      	b.n	800347c <_free_r+0x28>
 80034ec:	b003      	add	sp, #12
 80034ee:	bd30      	pop	{r4, r5, pc}
 80034f0:	200000f4 	.word	0x200000f4

080034f4 <_malloc_r>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	1ccd      	adds	r5, r1, #3
 80034f8:	f025 0503 	bic.w	r5, r5, #3
 80034fc:	3508      	adds	r5, #8
 80034fe:	2d0c      	cmp	r5, #12
 8003500:	bf38      	it	cc
 8003502:	250c      	movcc	r5, #12
 8003504:	2d00      	cmp	r5, #0
 8003506:	4606      	mov	r6, r0
 8003508:	db01      	blt.n	800350e <_malloc_r+0x1a>
 800350a:	42a9      	cmp	r1, r5
 800350c:	d903      	bls.n	8003516 <_malloc_r+0x22>
 800350e:	230c      	movs	r3, #12
 8003510:	6033      	str	r3, [r6, #0]
 8003512:	2000      	movs	r0, #0
 8003514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003516:	f000 f87d 	bl	8003614 <__malloc_lock>
 800351a:	4921      	ldr	r1, [pc, #132]	; (80035a0 <_malloc_r+0xac>)
 800351c:	680a      	ldr	r2, [r1, #0]
 800351e:	4614      	mov	r4, r2
 8003520:	b99c      	cbnz	r4, 800354a <_malloc_r+0x56>
 8003522:	4f20      	ldr	r7, [pc, #128]	; (80035a4 <_malloc_r+0xb0>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b923      	cbnz	r3, 8003532 <_malloc_r+0x3e>
 8003528:	4621      	mov	r1, r4
 800352a:	4630      	mov	r0, r6
 800352c:	f000 f862 	bl	80035f4 <_sbrk_r>
 8003530:	6038      	str	r0, [r7, #0]
 8003532:	4629      	mov	r1, r5
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f85d 	bl	80035f4 <_sbrk_r>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d123      	bne.n	8003586 <_malloc_r+0x92>
 800353e:	230c      	movs	r3, #12
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	4630      	mov	r0, r6
 8003544:	f000 f86c 	bl	8003620 <__malloc_unlock>
 8003548:	e7e3      	b.n	8003512 <_malloc_r+0x1e>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	1b5b      	subs	r3, r3, r5
 800354e:	d417      	bmi.n	8003580 <_malloc_r+0x8c>
 8003550:	2b0b      	cmp	r3, #11
 8003552:	d903      	bls.n	800355c <_malloc_r+0x68>
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	441c      	add	r4, r3
 8003558:	6025      	str	r5, [r4, #0]
 800355a:	e004      	b.n	8003566 <_malloc_r+0x72>
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	42a2      	cmp	r2, r4
 8003560:	bf0c      	ite	eq
 8003562:	600b      	streq	r3, [r1, #0]
 8003564:	6053      	strne	r3, [r2, #4]
 8003566:	4630      	mov	r0, r6
 8003568:	f000 f85a 	bl	8003620 <__malloc_unlock>
 800356c:	f104 000b 	add.w	r0, r4, #11
 8003570:	1d23      	adds	r3, r4, #4
 8003572:	f020 0007 	bic.w	r0, r0, #7
 8003576:	1ac2      	subs	r2, r0, r3
 8003578:	d0cc      	beq.n	8003514 <_malloc_r+0x20>
 800357a:	1a1b      	subs	r3, r3, r0
 800357c:	50a3      	str	r3, [r4, r2]
 800357e:	e7c9      	b.n	8003514 <_malloc_r+0x20>
 8003580:	4622      	mov	r2, r4
 8003582:	6864      	ldr	r4, [r4, #4]
 8003584:	e7cc      	b.n	8003520 <_malloc_r+0x2c>
 8003586:	1cc4      	adds	r4, r0, #3
 8003588:	f024 0403 	bic.w	r4, r4, #3
 800358c:	42a0      	cmp	r0, r4
 800358e:	d0e3      	beq.n	8003558 <_malloc_r+0x64>
 8003590:	1a21      	subs	r1, r4, r0
 8003592:	4630      	mov	r0, r6
 8003594:	f000 f82e 	bl	80035f4 <_sbrk_r>
 8003598:	3001      	adds	r0, #1
 800359a:	d1dd      	bne.n	8003558 <_malloc_r+0x64>
 800359c:	e7cf      	b.n	800353e <_malloc_r+0x4a>
 800359e:	bf00      	nop
 80035a0:	200000f4 	.word	0x200000f4
 80035a4:	200000f8 	.word	0x200000f8

080035a8 <_realloc_r>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	4607      	mov	r7, r0
 80035ac:	4614      	mov	r4, r2
 80035ae:	460e      	mov	r6, r1
 80035b0:	b921      	cbnz	r1, 80035bc <_realloc_r+0x14>
 80035b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035b6:	4611      	mov	r1, r2
 80035b8:	f7ff bf9c 	b.w	80034f4 <_malloc_r>
 80035bc:	b922      	cbnz	r2, 80035c8 <_realloc_r+0x20>
 80035be:	f7ff ff49 	bl	8003454 <_free_r>
 80035c2:	4625      	mov	r5, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035c8:	f000 f830 	bl	800362c <_malloc_usable_size_r>
 80035cc:	42a0      	cmp	r0, r4
 80035ce:	d20f      	bcs.n	80035f0 <_realloc_r+0x48>
 80035d0:	4621      	mov	r1, r4
 80035d2:	4638      	mov	r0, r7
 80035d4:	f7ff ff8e 	bl	80034f4 <_malloc_r>
 80035d8:	4605      	mov	r5, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	d0f2      	beq.n	80035c4 <_realloc_r+0x1c>
 80035de:	4631      	mov	r1, r6
 80035e0:	4622      	mov	r2, r4
 80035e2:	f7ff ff0f 	bl	8003404 <memcpy>
 80035e6:	4631      	mov	r1, r6
 80035e8:	4638      	mov	r0, r7
 80035ea:	f7ff ff33 	bl	8003454 <_free_r>
 80035ee:	e7e9      	b.n	80035c4 <_realloc_r+0x1c>
 80035f0:	4635      	mov	r5, r6
 80035f2:	e7e7      	b.n	80035c4 <_realloc_r+0x1c>

080035f4 <_sbrk_r>:
 80035f4:	b538      	push	{r3, r4, r5, lr}
 80035f6:	4d06      	ldr	r5, [pc, #24]	; (8003610 <_sbrk_r+0x1c>)
 80035f8:	2300      	movs	r3, #0
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	f7fd fbf8 	bl	8000df4 <_sbrk>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d102      	bne.n	800360e <_sbrk_r+0x1a>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	b103      	cbz	r3, 800360e <_sbrk_r+0x1a>
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	bd38      	pop	{r3, r4, r5, pc}
 8003610:	20000168 	.word	0x20000168

08003614 <__malloc_lock>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__malloc_lock+0x8>)
 8003616:	f000 b811 	b.w	800363c <__retarget_lock_acquire_recursive>
 800361a:	bf00      	nop
 800361c:	20000170 	.word	0x20000170

08003620 <__malloc_unlock>:
 8003620:	4801      	ldr	r0, [pc, #4]	; (8003628 <__malloc_unlock+0x8>)
 8003622:	f000 b80c 	b.w	800363e <__retarget_lock_release_recursive>
 8003626:	bf00      	nop
 8003628:	20000170 	.word	0x20000170

0800362c <_malloc_usable_size_r>:
 800362c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003630:	1f18      	subs	r0, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfbc      	itt	lt
 8003636:	580b      	ldrlt	r3, [r1, r0]
 8003638:	18c0      	addlt	r0, r0, r3
 800363a:	4770      	bx	lr

0800363c <__retarget_lock_acquire_recursive>:
 800363c:	4770      	bx	lr

0800363e <__retarget_lock_release_recursive>:
 800363e:	4770      	bx	lr

08003640 <_init>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

0800364c <_fini>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr
